// Generated by LispyScript v0.3.6
"use strict";
$(function() {
    var APIConnection = function(pathname) {
        var wsUrl = ((((window.location.protocol === "https:") ?
                "wss://" :
                "ws://") + window.location.host) + pathname),
            connAttempts = 0,
            conn = null,
            callback = null;
        var retry = function() {
            connAttempts = (1 + connAttempts);
            return ((connAttempts < 10) ?
                (function() {
                    conn = new WebSocket(wsUrl)();
                    conn.onmessage = callback;
                    conn.onerror = function() {
                        console.log("WS connection errored");
                        return retry();
                    };
                    conn.onclose = function() {
                        return console.log("WS connection closed");
                    };
                })() :
                undefined);
        };
        retry();
        return {
            registerCallback: function(func) {
                conn.onmessage = func;
                callback = func;
            },
            readyState: function() {
                return (conn ?
                    conn.readyState :
                    -1);
            },
            close: function() {
                return conn.close();
            }
        };
    };
    var EntityRow = React.createClass(_.defaults({
        render: function() {
            var categoryTh = (this.props.firstRowSpan ?
                React.createElement("th",{
                    rowSpan: this.props.firstRowSpan
                },this.props.entity.category) :
                "");
            return React.createElement("tr",{},categoryTh,React.createElement("td",{},this.props.entity.name));
        }
    },_.invert({
        EntityRow: "displayName"
    })));
    var EntityGroup = React.createClass(_.defaults({
        render: function() {
            return React.createElement("tbody",{},_.map(this.props.entities,function(entity,i) {
                return React.createElement(EntityRow,{
                    key: entity.id,
                    entity: entity,
                    firstRowSpan: (i ?
                        0 :
                        this.props.entity.length)
                });
            }));
        }
    },_.invert({
        EntityGroup: "displayName"
    })));
    var EntityTable = React.createClass(_.defaults({
        getInitialState: function() {
            return {
                entities: {}
            };
        },
        componentDidMount: function() {
            var that = this;
            return this.props.conn.registerCallback(function(e) {
                var groupedData = _.groupBy((JSON.parse(e.data)).data,"category");
                var groupedDataSorted = _.object(_.map(groupedData,function(v,k) {
                    return [
                        k,
                        _.sortBy(v,"name")
                    ];
                }));
                return that.setState({
                    entities: groupedDataSorted
                });
            });
        },
        componentWillUnmount: function() {
            return this.props.conn.close();
        },
        render: function() {
            console.log("EntityTable render");
            var rows = _.map(this.state.entities,function(entities,idx) {
                return React.createElement(EntityGroup,{
                    entities: entities,
                    key: idx
                });
            });
            return React.createElement("div",{
                className: "table-responsive"
            },React.createElement("table",{
                className: "table"
            },React.createElement("thead",{},React.createElement("tr",{},React.createElement("th",{},"Category"),React.createElement("th",{},"Name"))),rows));
        }
    },_.invert({
        EntityTable: "displayName"
    })));
    var BSTab = React.createClass(_.defaults({
        render: function() {
            return React.createElement("li",{
                role: "presentation",
                className: (this.props.active ?
                    "active" :
                    "")
            },React.createElement("a",{
                "data-target": this.props.target,
                "aria-controls": "home",
                role: "tab",
                "data-toggle": "tab"
            },this.props.label));
        },
        componentDidMount: function() {
            (this.props.willShow ?
                (($(this.getDOMNode())).find("a")).on("show.bs.tab",this.props.WillShow) :
                undefined);
            return (this.props.didHide ?
                (($(this.getDOMNode())).find("a")).on("hidden.bs.tab",this.props.didHide) :
                undefined);
        }
    },_.invert({
        BSTab: "displayName"
    })));
    var BSTabContent = React.createClass(_.defaults({
        render: function() {
            return React.createElement("div",{
                role: "tabpanel",
                className: (this.props.active ?
                    "tab-pane fade in active" :
                    "tab-pane fade in"),
                id: this.props.name
            },this.props.children);
        }
    },_.invert({
        BSTabContent: "displayName"
    })));
    var BSModal = React.createClass(_.defaults({
        render: function() {
            var header = React.createElement("div",{
                className: "modal-header"
            },(this.props.canClose ?
                React.createElement("button",{
                    type: "button",
                    className: "close",
                    "data-dismiss": "modal"
                },React.createElement("span",{
                    "aria-hidden": "true"
                },"×"),React.createElement("span",{
                    className: "sr-only"
                },"Close")) :
                ""),React.createElement("h4",{
                className: "modal-title"
            },this.props.title));
            var footer = (this.props.buttons ?
                React.createElement("div",{
                    className: "modal-footer"
                },this.props.buttons) :
                "");
            return React.createElement("div",{
                id: "modal",
                className: "modal fade"
            },React.createElement("div",{
                className: "modal-dialog"
            },React.createElement("div",{
                className: "modal-content"
            },header,React.createElement("div",{
                className: "modal-body"
            },this.props.children),footer)));
        },
        componentDidMount: function() {
            return ($(this.getDOMNode())).modal({
                keyboard: false,
                backdrop: "static"
            });
        }
    },_.invert({
        BSModal: "displayName"
    })));
    var EntityTableTab = React.createClass(_.defaults({
        render: function() {
            var name = this.props.name;
            var willShow = function() {
                return React.render(React.createElement(EntityTable,{
                    conn: APIConnection((("/api/" + name) + "s"))
                }),($(("#" + name))).get(0));
            };
            var didHide = function() {
                return React.unmountComponentAtNode(($(("#" + name))).get(0));
            };
            return React.createElement(BSTab,{
                active: 0,
                target: ("#" + name),
                label: this.props.label,
                willShow: willShow,
                didHide: didHide
            });
        }
    },_.invert({
        EntityTableTab: "displayName"
    })));
    var Page = React.createClass(_.defaults({
        render: function() {
            React.createElement("div",{
                id: "modal-wrapper"
            });
            return React.createElement("div",{
                id: "wrapper"
            },React.createElement("div",{
                className: "container"
            },React.createElement("div",{
                className: "page-header"
            },React.createElement("h1",{},"RVHS Science Lab Undertaking — For Teachers and Administrators")),React.createElement("p",{},"You are logged in as xxx."),React.createElement("div",{
                role: "tabpanel"
            },React.createElement("ul",{
                className: "nav nav-tabs",
                role: "tablist"
            },React.createElement(BSTab,{
                active: 1,
                target: "#home",
                label: "Home"
            }),React.createElement(EntityTableTab,{
                name: "cca",
                label: "Manage CCAs"
            })),React.createElement("div",{
                className: "tab-content"
            },React.createElement(BSTabContent,{
                active: 1,
                name: "home"
            },React.createElement("p",{},"ehh")),React.createElement(BSTabContent,{
                name: "cca"
            })))));
        },
        componentDidMount: function() {
            return ((typeof(window.WebSocket) === "undefined") ?
                React.render(React.createElement(BSModal,{
                    canClose: 0,
                    title: "Browser Unsupported"
                },React.createElement("p",{},"Your browser is too old to use this website. This website requires at least Internet Explorer version 10, Apple Safari version 7, Google Chrome version 16, or Mozilla Firefox version 11. Regardless of which broswer you are using, it is always recommended that you use the latest version available.")),($("#modal-wrapper")).get(0)) :
                undefined);
        }
    },_.invert({
        Page: "displayName"
    })));
    return React.render(React.createElement(Page,{}),document.body);
});
