// Generated by LispyScript v0.3.6
"use strict";
$(function() {
    var React_createElement = React.createElement;
    var React_createClass = React.createClass;
    var APIConnection = function(pathname) {
        var wsUrl = ((((window.location.protocol === "https:") ?
            "wss://" :
            "ws://") + window.location.host) + pathname);
        var conn = null;
        var callback = null;
        var timeConnected = null;
        var connect = function() {
            return (((Date.now() - timeConnected) > 2000) ?
                (function() {
                    conn = new WebSocket(wsUrl);
                    conn.onopen = function() {
                        timeConnected = Date.now();
                    };
                    conn.onmessage = callback;
                    conn.onerror = function() {
                        console.log("WS connection errored; how?");
                        return connect();
                    };
                    conn.onclose = function() {
                        return console.log("WS connection closed; why?");
                    };
                })() :
                setTimeout(connect,(Date.now() - timeConnected)));
        };
        connect();
        ($(window)).on("beforeunload",function() {
            return conn.close();
        });
        return {
            registerCallback: function(func) {
                conn.onmessage = func;
                callback = func;
            },
            readyState: function() {
                return (conn ?
                    conn.readyState :
                    -1);
            },
            close: function() {
                return conn.close();
            }
        };
    };
    var EntityRow = React_createClass(_.defaults({
        render: function() {
            var that = this;
            var dataSpec = (pageSpec[window.location.pathname]).dataSpec;
            var firstCell = (((!(dataSpec.categoryColumn === null)) && this.props.firstRowSpan) ?
                React_createElement("td",{
                    rowSpan: this.props.firstRowSpan
                },this.props.entity[dataSpec.categoryColumn[0]]) :
                null);
            return React_createElement("tr",{},firstCell,_.map(dataSpec.columns,function(spec,idx) {
                return React_createElement("td",{
                    key: idx
                },that.props.entity[spec[0]]);
            }),React_createElement("td",{
                className: "text-right"
            },React_createElement("div",{
                className: "btn-group",
                role: "group",
                "aria-label": "Action Buttons"
            },React_createElement("button",{
                type: "button",
                className: "btn btn-default btn-xs",
                "aria-label": "Edit",
                "data-action": "edit",
                "data-entityid": this.props.entity.id
            },React_createElement("span",{
                className: "glyphicon glyphicon-pencil",
                "aria-hidden": "true"
            })),React_createElement("button",{
                type: "button",
                className: "btn btn-default btn-xs",
                "aria-label": "Delete",
                "data-action": "delete",
                "data-entityid": this.props.entity.id
            },React_createElement("span",{
                className: "glyphicon glyphicon-trash",
                "aria-hidden": "true"
            })))));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityRow: "displayName"
    })));
    var EntityCategory = React_createClass(_.defaults({
        render: function() {
            return React_createElement("tbody",{},_.map(this.props.entities,function(entity,i,entities) {
                return React_createElement(EntityRow,{
                    key: entity.id,
                    entity: entity,
                    firstRowSpan: (i ?
                        0 :
                        entities.length)
                });
            }));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityCategory: "displayName"
    })));
    var EntityTable = React_createClass(_.defaults({
        getInitialState: function() {
            return {
                tableData: {
                    data: []
                }
            };
        },
        componentDidMount: function() {
            var that = this;
            this.props.conn.registerCallback(function(e) {
                return that.setState({
                    tableData: JSON.parse(e.data)
                });
            });
            return (($(this.getDOMNode())).on("click","button[data-action=\"edit\"]",function() {
                var entityid = ($(this)).data("entityid");
                var entity = _.find(that.state.tableData.data,function(d) {
                    return (d.id === entityid);
                });
                return React.render(React_createElement(that.props.entityEditor,{
                    entity: entity
                }),getModalWrapper());
            })).on("click","button[data-action=\"delete\"]",function() {
                return React.render(React_createElement(that.props.deleteConfirmation,{
                    entityid: ($(this)).data("entityid")
                }),getModalWrapper());
            });
        },
        componentWillUnmount: function() {
            return this.props.conn.close();
        },
        render: function() {
            var dataSpec = (pageSpec[window.location.pathname]).dataSpec;
            var rawData = this.state.tableData.data;
            var rows = ((dataSpec.categoryColumn === null) ?
                (function() {
                    var sortName = dataSpec.columns[0][0];
                    var massagedData = _.sortBy(rawData,sortName);
                    return React_createElement("tbody",{},_.map(massagedData,function(entity) {
                        return React_createElement(EntityRow,{
                            firstRowSpan: 1,
                            entity: entity,
                            key: entity.id
                        });
                    }));
                })() :
                (function() {
                    var categoryName = dataSpec.categoryColumn[0];
                    var sortName = dataSpec.columns[0][0];
                    var massagedData = _.map(_.sortBy(_.map(_.groupBy(rawData,categoryName),function(v,k) {
                        return {
                            k: k,
                            v: _.sortBy(v,sortName)
                        };
                    }),"k"),function(d) {
                        return (d).v;
                    });
                    return _.map(massagedData,function(entities) {
                        var category = (entities[0]).category;
                        return React_createElement(EntityCategory,{
                            entities: entities,
                            key: category
                        });
                    });
                })());
            var headers = _.map((((dataSpec.categoryColumn === null) ?
                [] :
                [
                    dataSpec.categoryColumn[2]
                ])).concat(_.map(dataSpec.columns,function(v) {
                return v[2];
            })),function(label,idx) {
                return React_createElement("th",{
                    key: idx
                },label);
            });
            return React_createElement("div",{
                className: "table-responsive"
            },React_createElement("table",{
                className: "table"
            },React_createElement("thead",{},React_createElement("tr",{},headers,React_createElement("th",{}))),rows));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityTable: "displayName"
    })));
    var Modal = React_createClass(_.defaults({
        render: function() {
            var header = React_createElement("div",{
                className: "modal-header"
            },(this.props.canClose ?
                React_createElement("button",{
                    type: "button",
                    className: "close",
                    id: "modalClose",
                    "data-dismiss": "modal"
                },React_createElement("span",{
                    "aria-hidden": "true"
                },"Ã—"),React_createElement("span",{
                    className: "sr-only"
                },"Close")) :
                ""),React_createElement("h4",{
                className: "modal-title"
            },this.props.title));
            var footer = (this.props.buttons ?
                React_createElement("div",{
                    className: "modal-footer"
                },this.props.buttons) :
                "");
            return React_createElement("div",{
                id: "modal",
                className: "modal fade"
            },React_createElement("div",{
                className: "modal-dialog"
            },React_createElement("div",{
                className: "modal-content"
            },header,React_createElement("div",{
                className: "modal-body"
            },this.props.children),footer)));
        },
        componentDidMount: function() {
            return ($(this.getDOMNode())).modal({
                keyboard: false,
                backdrop: "static"
            });
        },
        componentDidUpdate: function() {
            return ($(this.getDOMNode())).modal({
                keyboard: false,
                backdrop: "static"
            });
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        Modal: "displayName"
    })));
    var getModalWrapper = function() {
        return ($("#modal-wrapper")).get(0);
    };
    var ActionModal = React_createClass(_.defaults({
        render: function() {
            var buttons = React_createElement("div",{
                id: "actionModalButtons"
            },React_createElement("button",{
                type: "button",
                className: "btn btn-default",
                "data-dismiss": "modal"
            },"Cancel"),React_createElement("button",{
                type: (this.props.actionButtonType || "button"),
                className: ("btn btn-" + this.props.actionButtonStyle),
                id: "actionButton"
            },this.props.actionButtonLabel));
            return React_createElement(Modal,{
                canClose: 1,
                title: this.props.title,
                buttons: buttons
            },this.props.children);
        },
        componentDidMount: function() {
            var that = this;
            return ($("#actionButton")).on("click",function(e) {
                e.preventDefault();
                (($("#actionModalButtons")).empty()).append("<img width=16 height=16 src=/static/res/loading.gif />");
                ($("#modalClose")).remove();
                return that.props.next(function() {
                    return ($("#modal")).modal("hide");
                });
            });
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        ActionModal: "displayName"
    })));
    var CcaEditor = React_createClass(_.defaults({
        render: function() {
            var title = (this.props.entity ?
                "Edit CCA" :
                "Add a new CCA");
            var actionButtonLabel = (this.props.entity ?
                "Edit" :
                "Add");
            var endpoint = (this.props.entity ?
                ("/api/ccas/" + this.props.entity.id) :
                "/api/ccas");
            var method = (this.props.entity ?
                "PUT" :
                "POST");
            var next = function(hideModal) {
                return $.ajax(endpoint,{
                    type: method,
                    data: ($("#ccaEditorForm")).serialize(),
                    complete: hideModal
                });
            };
            return React_createElement("form",{
                id: "ccaEditorForm",
                role: "form"
            },React_createElement(ActionModal,{
                title: title,
                actionButtonLabel: actionButtonLabel,
                actionButtonStyle: "primary",
                actionButtonType: "submit",
                next: next
            },React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "name"
            },"Name"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "name",
                placeholder: "CCA Name",
                defaultValue: (this.props.entity ?
                    this.props.entity.name :
                    "")
            })),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "category"
            },"Category"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "category",
                placeholder: "CCA Category",
                defaultValue: (this.props.entity ?
                    this.props.entity.category :
                    "")
            }))));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        CcaEditor: "displayName"
    })));
    var AdminHomeR = React_createClass(_.defaults({
        render: function() {
            return React_createElement("div",{
                className: "row"
            },React_createElement("div",{
                className: "col-sm-11 col-md-8 col-lg-7"
            },React_createElement("h2",{},"Welcome"),React_createElement("p",{},"Welcome to the admin console for RVHS Science Lab Undertaking Project. XXX Be verbose."),React_createElement("h2",{},"Quick Guide"),React_createElement("p",{},"TODO"),React_createElement("h2",{},"API Documentation"),React_createElement("p",{},"If you know some basics of programming, you can use it to add or remove things automatically via the HTTP JSON API.")));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        AdminHomeR: "displayName"
    })));
    var AdminCcasR = React_createClass(_.defaults({
        render: function() {
            var CcaDeleteConfirmation = React_createClass(_.defaults({
                render: function() {
                    var that = this;
                    var next = function(hideModal) {
                        return $.ajax(("/api/ccas/" + that.props.entityid),{
                            type: "DELETE",
                            complete: hideModal
                        });
                    };
                    return React_createElement(ActionModal,{
                        title: "Delete This CCA",
                        actionButtonLabel: "Delete It",
                        actionButtonStyle: "danger",
                        next: next
                    },React_createElement("p",{},"Are you sure want to delete this CCA from the database?"));
                }
            },{
                render: function() {
                    return false;
                }
            },_.invert({
                CcaDeleteConfirmation: "displayName"
            })));
            return React_createElement("div",{},React_createElement("div",{
                className: "pull-right btn-group",
                role: "toolbar",
                "aria-label": "Action Buttons"
            },React_createElement("button",{
                id: "addButton",
                type: "button",
                className: "btn btn-default"
            },"Add New"),React_createElement("button",{
                id: "removeAllButton",
                type: "button",
                className: "btn btn-default"
            },"Remove All")),React_createElement("h2",{},"All CCAs"),React_createElement(EntityTable,{
                conn: APIConnection("/api/ccas"),
                entityEditor: CcaEditor,
                deleteConfirmation: CcaDeleteConfirmation
            }));
        },
        componentDidMount: function() {
            ($("#addButton")).on("click",function() {
                return React.render(React_createElement(CcaEditor,{}),getModalWrapper());
            });
            return ($("#removeAllButton")).on("click",function() {
                return React.render(React_createElement(ActionModal,{
                    title: "Deleting All CCAs",
                    actionButtonLabel: "Yes, Delete All",
                    actionButtonStyle: "danger",
                    next: function(hideModal) {
                        return $.ajax("/api/ccas",{
                            type: "DELETE",
                            complete: hideModal
                        });
                    }
                },React_createElement("p",{},"Are you sure you want to delete all CCAs currently stored in the database? This will also delete all studentsâ€™ CCA information.")),getModalWrapper());
            });
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        AdminCcasR: "displayName"
    })));
    var AdminSubjectsR = React_createClass(_.defaults({},{
        render: function() {
            return false;
        }
    },_.invert({
        AdminSubjectsR: "displayName"
    })));
    var AdminTeachersR = React_createClass(_.defaults({},{
        render: function() {
            return false;
        }
    },_.invert({
        AdminTeachersR: "displayName"
    })));
    var AdminStudentsR = React_createClass(_.defaults({},{
        render: function() {
            return false;
        }
    },_.invert({
        AdminStudentsR: "displayName"
    })));
    var pageSpec = {
        "/admin": {
            pageName: "Home",
            component: AdminHomeR,
            dataSpec: null
        },
        "/admin/ccas": {
            pageName: "Manage CCAs",
            component: AdminCcasR,
            dataSpec: {
                categoryColumn: [
                    "category",
                    _.identity,
                    "CCA Category"
                ],
                columns: [
                    [
                        "name",
                        _.identity,
                        "CCA Name"
                    ]
                ]
            }
        },
        "/admin/subjects": {
            pageName: "Manage Subjects",
            component: AdminSubjectsR,
            dataSpec: {
                categoryColumn: null,
                columns: [
                    [
                        "code",
                        _.identity,
                        "Subject Code"
                    ],
                    [
                        "level",
                        _.identity,
                        "Applies To"
                    ],
                    [
                        "is_science",
                        _.identity,
                        "Science Subject?"
                    ],
                    [
                        "name",
                        _.identity,
                        "Subject Name"
                    ]
                ]
            }
        },
        "/admin/teachers": {
            pageName: "Manage Teachers",
            component: AdminTeachersR,
            dataSpec: null
        },
        "/admin/students": {
            pageName: "Manage Students",
            component: AdminStudentsR,
            dataSpec: null
        }
    };
    var Page = React_createClass(_.defaults({
        render: function() {
            var pathname = window.location.pathname;
            var tabs = _.map(pageSpec,function(page,route) {
                return React_createElement("li",{
                    key: route,
                    role: "presentation",
                    className: ((route === pathname) ?
                        "active" :
                        "")
                },React_createElement("a",{
                    href: ((route === pathname) ?
                        "#" :
                        route)
                },(page).pageName));
            });
            return React_createElement("div",{
                id: "content-wrapper"
            },React_createElement("div",{
                id: "modal-wrapper"
            }),React_createElement("div",{
                className: "container"
            },React_createElement("div",{
                className: "page-header"
            },React_createElement("h1",{},"RVHS Science Lab Undertaking â€” For Teachers and Administrators")),React_createElement("p",{},"You are logged in as xxx."),React_createElement("div",{
                role: "tabpanel"
            },React_createElement("ul",{
                className: "nav nav-tabs"
            },tabs)),React_createElement("div",{
                id: "main-content"
            })));
        },
        componentDidMount: function() {
            var pathname = window.location.pathname;
            return ((typeof(window.WebSocket) === "undefined") ?
                React.render(React_createElement(Modal,{
                    canClose: 0,
                    title: "Browser Unsupported"
                },React_createElement("p",{},"Your browser is too old to use this website. This website requires at least Internet Explorer version 10, Apple Safari version 7, Google Chrome version 16, or Mozilla Firefox version 11. Regardless of which broswer you are using, it is always recommended that you use the latest version available.")),getModalWrapper()) :
                React.render(React_createElement((pageSpec[pathname]).component,{}),($("#main-content")).get(0)));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        Page: "displayName"
    })));
    return React.render(React_createElement(Page,{}),document.body);
});
