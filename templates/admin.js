// Generated by LispyScript v0.3.6
"use strict";
$(function() {
    var APIConnection = function(pathname) {
        var wsUrl = ((((window.location.protocol === "https:") ?
                "wss://" :
                "ws://") + window.location.host) + pathname),
            connAttempts = 0,
            conn = null,
            callback = null;
        var retry = function() {
            return ((++connAttempts < 10) ?
                (function() {
                    conn = new WebSocket(wsUrl);
                    conn.onmessage = callback;
                    conn.onerror = function() {
                        console.log("WS connection errored; how?");
                        return retry();
                    };
                    conn.onclose = function() {
                        return console.log("WS connection closed; why?");
                    };
                })() :
                undefined);
        };
        retry();
        return {
            registerCallback: function(func) {
                conn.onmessage = func;
                callback = func;
            },
            readyState: function() {
                return (conn ?
                    conn.readyState :
                    -1);
            },
            close: function() {
                return conn.close();
            }
        };
    };
    var EntityRow = React.createClass(_.defaults({
        render: function() {
            var categoryTh = (this.props.firstRowSpan ?
                React.createElement("th",{
                    rowSpan: this.props.firstRowSpan
                },this.props.entity.category) :
                "");
            return React.createElement("tr",{},categoryTh,React.createElement("td",{},this.props.entity.name),React.createElement("td",{
                className: "text-right"
            },React.createElement("div",{
                className: "btn-group",
                role: "group",
                "aria-label": "Action Buttons"
            },React.createElement("button",{
                type: "button",
                className: "btn btn-default btn-xs",
                "aria-label": "Edit"
            },React.createElement("span",{
                className: "glyphicon glyphicon-pencil",
                "aria-hidden": "true"
            })),React.createElement("button",{
                type: "button",
                className: "btn btn-default btn-xs",
                "aria-label": "Delete"
            },React.createElement("span",{
                className: "glyphicon glyphicon-trash",
                "aria-hidden": "true"
            })))));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityRow: "displayName"
    })));
    var EntityGroup = React.createClass(_.defaults({
        render: function() {
            return React.createElement("tbody",{},_.map(this.props.entities,function(entity,i,entities) {
                return React.createElement(EntityRow,{
                    key: entity.id,
                    entity: entity,
                    firstRowSpan: (i ?
                        0 :
                        entities.length)
                });
            }));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityGroup: "displayName"
    })));
    var EntityTable = React.createClass(_.defaults({
        getInitialState: function() {
            return {
                entities: {}
            };
        },
        componentDidMount: function() {
            var that = this;
            return this.props.conn.registerCallback(function(e) {
                var massagedData = _.map(_.sortBy(_.map(_.groupBy((JSON.parse(e.data)).data,"category"),function(v,k) {
                    return {
                        k: k,
                        v: _.sortBy(v,"name")
                    };
                }),"k"),function(d) {
                    return (d).v;
                });
                return that.setState({
                    entities: massagedData
                });
            });
        },
        componentWillUnmount: function() {
            return this.props.conn.close();
        },
        render: function() {
            var rows = _.map(this.state.entities,function(entities,idx) {
                return React.createElement(EntityGroup,{
                    entities: entities,
                    key: idx
                });
            });
            return React.createElement("div",{
                className: "table-responsive"
            },React.createElement("table",{
                className: "table"
            },React.createElement("thead",{},React.createElement("tr",{},React.createElement("th",{},"Category"),React.createElement("th",{},"Name"),React.createElement("th",{},""))),rows));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityTable: "displayName"
    })));
    var Modal = React.createClass(_.defaults({
        render: function() {
            var header = React.createElement("div",{
                className: "modal-header"
            },(this.props.canClose ?
                React.createElement("button",{
                    type: "button",
                    className: "close",
                    "data-dismiss": "modal"
                },React.createElement("span",{
                    "aria-hidden": "true"
                },"Ã—"),React.createElement("span",{
                    className: "sr-only"
                },"Close")) :
                ""),React.createElement("h4",{
                className: "modal-title"
            },this.props.title));
            var footer = (this.props.buttons ?
                React.createElement("div",{
                    className: "modal-footer"
                },this.props.buttons) :
                "");
            return React.createElement("div",{
                id: "modal",
                className: "modal fade"
            },React.createElement("div",{
                className: "modal-dialog"
            },React.createElement("div",{
                className: "modal-content"
            },header,React.createElement("div",{
                className: "modal-body"
            },this.props.children),footer)));
        },
        componentDidMount: function() {
            return ($(this.getDOMNode())).modal({
                keyboard: false,
                backdrop: "static"
            });
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        Modal: "displayName"
    })));
    var AdminHomeR = React.createClass(_.defaults({
        render: function() {
            return React.createElement("div",{
                className: "row"
            },React.createElement("div",{
                className: "col-sm-11 col-md-8 col-lg-7"
            },React.createElement("h2",{},"Welcome"),React.createElement("p",{},"Welcome to the admin console for RVHS Science Lab Undertaking Project. XXX Be verbose."),React.createElement("h2",{},"Quick Guide"),React.createElement("p",{},"TODO"),React.createElement("h2",{},"API Documentation"),React.createElement("p",{},"TODO")));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        AdminHomeR: "displayName"
    })));
    var EntityView = React.createClass(_.defaults({
        render: function() {
            var name = this.props.name;
            var willShow = function() {
                return React.render(React.createElement(EntityTable,{
                    conn: APIConnection((("/api/" + name) + "s"))
                }),($(("#" + name))).get(0));
            };
            var didHide = function() {
                return React.unmountComponentAtNode(($(("#" + name))).get(0));
            };
            return React.createElement(BSTab,{
                active: 0,
                target: ("#" + name),
                label: this.props.label,
                willShow: willShow,
                didHide: didHide
            });
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityView: "displayName"
    })));
    var AdminCcasR = React.createClass(_.defaults({
        render: function() {
            return React.createElement("div",{},React.createElement("div",{
                className: "pull-right btn-group",
                role: "toolbar",
                "aria-label": "Action Buttons"
            },React.createElement("button",{
                type: "button",
                className: "btn btn-default"
            },"Add New"),React.createElement("button",{
                type: "button",
                className: "btn btn-default"
            },"Remove All")),React.createElement("h2",{},"All CCAs"),React.createElement(EntityTable,{
                conn: APIConnection("/api/ccas")
            }));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        AdminCcasR: "displayName"
    })));
    var AdminSubjectsR = React.createClass(_.defaults({},{
        render: function() {
            return false;
        }
    },_.invert({
        AdminSubjectsR: "displayName"
    })));
    var AdminTeachersR = React.createClass(_.defaults({},{
        render: function() {
            return false;
        }
    },_.invert({
        AdminTeachersR: "displayName"
    })));
    var AdminStudentsR = React.createClass(_.defaults({},{
        render: function() {
            return false;
        }
    },_.invert({
        AdminStudentsR: "displayName"
    })));
    var routes = {
        "/admin": [
            "Home",
            AdminHomeR
        ],
        "/admin/ccas": [
            "Manage CCAs",
            AdminCcasR
        ],
        "/admin/subjects": [
            "Manage Subjects",
            AdminSubjectsR
        ],
        "/admin/teachers": [
            "Manage Teachers",
            AdminTeachersR
        ],
        "/admin/students": [
            "Manage Students",
            AdminStudentsR
        ]
    };
    var Page = React.createClass(_.defaults({
        render: function() {
            var pathname = window.location.pathname;
            var tabs = _.map(routes,function(tuple,route) {
                return React.createElement("li",{
                    key: route,
                    role: "presentation",
                    className: ((route === pathname) ?
                        "active" :
                        "")
                },React.createElement("a",{
                    href: ((route === pathname) ?
                        "#" :
                        route)
                },tuple[0]));
            });
            return React.createElement("div",{
                id: "content-wrapper"
            },React.createElement("div",{
                id: "modal-wrapper"
            }),React.createElement("div",{
                className: "container"
            },React.createElement("div",{
                className: "page-header"
            },React.createElement("h1",{},"RVHS Science Lab Undertaking â€” For Teachers and Administrators")),React.createElement("p",{},"You are logged in as xxx."),React.createElement("div",{
                role: "tabpanel"
            },React.createElement("ul",{
                className: "nav nav-tabs"
            },tabs)),React.createElement("div",{
                id: "main-content"
            })));
        },
        componentDidMount: function() {
            var pathname = window.location.pathname;
            return ((typeof(window.WebSocket) === "undefined") ?
                React.render(React.createElement(Modal,{
                    canClose: 0,
                    title: "Browser Unsupported"
                },React.createElement("p",{},"Your browser is too old to use this website. This website requires at least Internet Explorer version 10, Apple Safari version 7, Google Chrome version 16, or Mozilla Firefox version 11. Regardless of which broswer you are using, it is always recommended that you use the latest version available.")),($("#modal-wrapper")).get(0)) :
                React.render(React.createElement(routes[pathname][1],{}),($("#main-content")).get(0)));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        Page: "displayName"
    })));
    return React.render(React.createElement(Page,{}),document.body);
});
