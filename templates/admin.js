// Generated by LispyScript v0.3.6
"use strict";
$(function() {
    var React_createElement = React.createElement;
    var React_createClass = React.createClass;
    var React_PropTypes = React.PropTypes;
    var __map = _.map;
    var APIConnection = function(pathname) {
        var wsUrl = ((((window.location.protocol === "https:") ?
            "wss://" :
            "ws://") + window.location.host) + pathname);
        var conn = null;
        var callback = null;
        var timeConnected = null;
        var connect = function() {
            return (((Date.now() - timeConnected) > 2000) ?
                (function() {
                    conn = new WebSocket(wsUrl);
                    conn.onopen = function() {
                        timeConnected = Date.now();
                    };
                    conn.onmessage = callback;
                    conn.onerror = function() {
                        console.log("WS connection errored.");
                        return connect();
                    };
                    conn.onclose = function(e) {
                        console.log(e);
                        return console.log("WS connection closed.");
                    };
                })() :
                setTimeout(connect,(Date.now() - timeConnected)));
        };
        ($(window)).on("beforeunload",function() {
            return conn.close();
        });
        return {
            registerCallback: function(func) {
                ((!conn) ?
                    connect() :
                    _.noop());
                var wrapFunc = function(e) {
                    return func(JSON.parse(e.data));
                };
                conn.onmessage = wrapFunc;
                callback = wrapFunc;
            },
            pathname: function() {
                return pathname;
            },
            close: function() {
                conn.onmessage = _.noop;
                conn.onerror = _.noop;
                conn.onclose = _.noop;
                return conn.close();
            }
        };
    };
    var EntityRow = React_createClass(_.defaults({
        propTypes: {
            firstRowSpan: React_PropTypes.number.isRequired,
            entity: React_PropTypes.object.isRequired,
            entityEditor: React_PropTypes.any.isRequired,
            auxiliary: React_PropTypes.object
        },
        render: function() {
            var that = this;
            var dataSpec = (pageSpec[window.location.pathname]).dataSpec;
            var firstCell = (((!(dataSpec.categoryColumn === null)) && that.props.firstRowSpan) ?
                (function() {
                    var value = that.props.entity[dataSpec.categoryColumn[0]];
                    var mapper = dataSpec.categoryColumn[1];
                    return React_createElement("td",{
                        rowSpan: that.props.firstRowSpan
                    },mapper.apply(that.props.auxiliary,[
                        value
                    ]));
                })() :
                null);
            var onEditButtonClick = function() {
                return React.render(React_createElement(that.props.entityEditor,{
                    auxiliary: that.props.auxiliary,
                    entity: that.props.entity
                }),getModalWrapper());
            };
            var onDeleteButtonClick = function() {
                return React.render(React_createElement(DeleteConfirmation,{
                    auxiliary: that.props.auxiliary,
                    entity: that.props.entity
                }),getModalWrapper());
            };
            return React_createElement("tr",{},firstCell,__map(dataSpec.columns,function(spec,idx) {
                var value = that.props.entity[spec[0]];
                var mapper = spec[1];
                return React_createElement("td",{
                    key: idx
                },mapper.apply(that.props.auxiliary,[
                    value
                ]));
            }),React_createElement("td",{
                className: "text-right"
            },React_createElement("div",{
                className: "btn-group",
                role: "group"
            },React_createElement("button",{
                type: "button",
                className: "btn btn-default btn-xs",
                title: "Edit",
                onClick: onEditButtonClick
            },React_createElement("span",{
                className: "glyphicon glyphicon-pencil",
                "aria-hidden": "true"
            })),React_createElement("button",{
                type: "button",
                className: "btn btn-default btn-xs",
                title: "Delete",
                onClick: onDeleteButtonClick
            },React_createElement("span",{
                className: "glyphicon glyphicon-trash",
                "aria-hidden": "true"
            })))));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityRow: "displayName"
    })));
    var EntityCategory = React_createClass(_.defaults({
        propTypes: {
            entities: React_PropTypes.array.isRequired,
            entityEditor: React_PropTypes.any.isRequired,
            auxiliary: React_PropTypes.object
        },
        render: function() {
            var that = this;
            return React_createElement("tbody",{},__map(this.props.entities,function(entity,i,entities) {
                return React_createElement(EntityRow,{
                    key: entity.id,
                    entityEditor: that.props.entityEditor,
                    auxiliary: that.props.auxiliary,
                    entity: entity,
                    firstRowSpan: (i ?
                        0 :
                        entities.length)
                });
            }));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityCategory: "displayName"
    })));
    var EntityTable = React_createClass(_.defaults({
        propTypes: {
            conn: React_PropTypes.object.isRequired,
            entityEditor: React_PropTypes.any.isRequired,
            auxiliary: React_PropTypes.object
        },
        getInitialState: function() {
            return {
                tableData: {
                    data: []
                }
            };
        },
        componentDidMount: function() {
            var that = this;
            return this.props.conn.registerCallback(function(d) {
                return that.setState({
                    tableData: d
                });
            });
        },
        componentDidUpdate: function() {
            var that = this;
            return this.props.conn.registerCallback(function(d) {
                return that.setState({
                    tableData: d
                });
            });
        },
        componentWillUnmount: function() {
            return this.props.conn.close();
        },
        componentWillReceiveProps: function(newProps) {
            return ((this.props.conn.pathname() !== newProps.conn.pathname()) ?
                this.props.conn.close() :
                undefined);
        },
        render: function() {
            var that = this;
            var dataSpec = (pageSpec[window.location.pathname]).dataSpec;
            var rawData = this.state.tableData.data;
            var rows = ((dataSpec.categoryColumn === null) ?
                (function() {
                    var sortName = dataSpec.columns[0][0];
                    var massagedData = _.sortBy(rawData,sortName);
                    return React_createElement("tbody",{},__map(massagedData,function(entity) {
                        return React_createElement(EntityRow,{
                            firstRowSpan: 1,
                            entityEditor: that.props.entityEditor,
                            auxiliary: that.props.auxiliary,
                            entity: entity,
                            key: entity.id
                        });
                    }));
                })() :
                (function() {
                    var categoryName = dataSpec.categoryColumn[0];
                    var sortName = dataSpec.columns[0][0];
                    var massagedData = __map(_.sortBy(__map(_.groupBy(rawData,categoryName),function(v,k) {
                        return {
                            k: k,
                            v: _.sortBy(v,sortName)
                        };
                    }),"k"),function(d) {
                        return (d).v;
                    });
                    return __map(massagedData,function(entities) {
                        var category = entities[0][categoryName];
                        return React_createElement(EntityCategory,{
                            entities: entities,
                            entityEditor: that.props.entityEditor,
                            auxiliary: that.props.auxiliary,
                            key: category
                        });
                    });
                })());
            var headers = __map((((dataSpec.categoryColumn === null) ?
                [] :
                [
                    dataSpec.categoryColumn[2]
                ])).concat(__map(dataSpec.columns,function(v) {
                return v[2];
            })),function(label,idx) {
                return React_createElement("th",{
                    key: idx
                },label);
            });
            return React_createElement("div",{
                className: "table-responsive"
            },React_createElement("table",{
                className: "table"
            },React_createElement("thead",{},React_createElement("tr",{},headers,React_createElement("th",{}))),rows));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityTable: "displayName"
    })));
    var Modal = React_createClass(_.defaults({
        propTypes: {
            canClose: React_PropTypes.bool.isRequired,
            title: React_PropTypes.node.isRequired,
            buttons: React_PropTypes.node,
            children: React_PropTypes.node.isRequired
        },
        render: function() {
            var header = React_createElement("div",{
                className: "modal-header"
            },(this.props.canClose ?
                React_createElement("button",{
                    type: "button",
                    className: "close",
                    id: "modalClose",
                    "data-dismiss": "modal"
                },React_createElement("span",{
                    "aria-hidden": "true"
                },"×"),React_createElement("span",{
                    className: "sr-only"
                },"Close")) :
                ""),React_createElement("h4",{
                className: "modal-title"
            },this.props.title));
            var footer = (this.props.buttons ?
                React_createElement("div",{
                    className: "modal-footer"
                },this.props.buttons) :
                "");
            return React_createElement("div",{
                id: "modal",
                className: "modal fade"
            },React_createElement("div",{
                className: "modal-dialog"
            },React_createElement("div",{
                className: "modal-content"
            },header,React_createElement("div",{
                className: "modal-body"
            },this.props.children),footer)));
        },
        componentDidMount: function() {
            return (($(this.getDOMNode())).on("hidden.bs.modal",function() {
                return React.unmountComponentAtNode(getModalWrapper());
            })).modal({
                keyboard: false,
                backdrop: "static"
            });
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        Modal: "displayName"
    })));
    var getModalWrapper = function() {
        return ($("#modal-wrapper")).get(0);
    };
    var ActionModal = React_createClass(_.defaults({
        propTypes: {
            actionButtonType: React_PropTypes.string,
            actionButtonStyle: React_PropTypes.string.isRequired,
            actionButtonLabel: React_PropTypes.node.isRequired,
            title: React_PropTypes.node.isRequired,
            children: React_PropTypes.node.isRequired,
            next: React_PropTypes.func.isRequired
        },
        getInitialState: function() {
            return {
                spinner: 0
            };
        },
        render: function() {
            var that = this;
            var onActionButtonClick = function(e) {
                e.preventDefault();
                var setSpinner = function(v) {
                    return that.setState({
                        spinner: v
                    });
                };
                return that.props.next(function() {
                    return ($("#modal")).modal("hide");
                },setSpinner);
            };
            var buttons = React_createElement("div",{},React_createElement("img",{
                width: 16,
                height: 16,
                src: "/static/res/loading.gif",
                style: {
                    display: (this.state.spinner ?
                        "inline" :
                        "none")
                }
            }),React_createElement("div",{
                style: {
                    display: (this.state.spinner ?
                        "none" :
                        "block")
                }
            },React_createElement("button",{
                type: "button",
                className: "btn btn-default",
                "data-dismiss": "modal"
            },"Cancel"),React_createElement("button",{
                type: (this.props.actionButtonType || "button"),
                className: ("btn btn-" + this.props.actionButtonStyle),
                onClick: onActionButtonClick
            },this.props.actionButtonLabel)));
            return React_createElement(Modal,{
                canClose: true,
                title: this.props.title,
                buttons: buttons
            },this.props.children);
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        ActionModal: "displayName"
    })));
    var RecordEditor = React_createClass(_.defaults({
        propTypes: {
            entityTypeHumanName: React_PropTypes.string.isRequired,
            entityTypeMachineName: React_PropTypes.string.isRequired,
            entity: React_PropTypes.object,
            children: React_PropTypes.node.isRequired
        },
        getInitialState: function() {
            return {
                err: null
            };
        },
        render: function() {
            var that = this;
            var hname = this.props.entityTypeHumanName;
            var mname = this.props.entityTypeMachineName;
            var title = (this.props.entity ?
                ("Edit " + hname) :
                ("Add a new " + hname));
            var actionButtonLabel = (this.props.entity ?
                "Edit" :
                "Add");
            var endpoint = (this.props.entity ?
                ((("/api/" + mname) + "/") + this.props.entity.id) :
                ("/api/" + mname));
            var method = (this.props.entity ?
                "PUT" :
                "POST");
            var onError = function(jqxhr) {
                var resp = JSON.parse(jqxhr.responseText);
                return that.setState({
                    err: resp.meta.details
                });
            };
            var next = function(hideModal,setSpinner) {
                setSpinner(1);
                console.log(($("#editorForm")).serialize());
                return $.ajax(endpoint,{
                    type: method,
                    data: ($("#editorForm")).serialize(),
                    success: hideModal,
                    error: function(jqxhr) {
                        setSpinner(0);
                        console.log("http error");
                        console.log(jqxhr);
                        return onError(jqxhr);
                    }
                });
            };
            return React_createElement("form",{
                id: "editorForm",
                role: "form"
            },React_createElement(ActionModal,{
                title: title,
                actionButtonLabel: actionButtonLabel,
                actionButtonStyle: "primary",
                actionButtonType: "submit",
                next: next
            },(this.state.err ?
                React_createElement("div",{
                    className: "alert alert-danger",
                    role: "alert"
                },this.state.err) :
                null),this.props.children));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        RecordEditor: "displayName"
    })));
    var CcaEditor = React_createClass(_.defaults({
        propTypes: {
            entity: React_PropTypes.object
        },
        render: function() {
            return React_createElement(RecordEditor,{
                entity: this.props.entity,
                entityTypeHumanName: "CCA",
                entityTypeMachineName: "ccas"
            },React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "name"
            },"CCA Name"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "name",
                placeholder: "e.g. Infocomm Club",
                defaultValue: (this.props.entity ?
                    (this.props.entity).name :
                    "")
            })),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "category"
            },"CCA Category"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "category",
                placeholder: "e.g. Clubs and Societies",
                defaultValue: (this.props.entity ?
                    (this.props.entity).category :
                    "")
            })));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        CcaEditor: "displayName"
    })));
    var SubjectEditor = React_createClass(_.defaults({
        propTypes: {
            entity: React_PropTypes.object
        },
        getInitialState: function() {
            return {
                compulsory: ((!this.props.entity) ?
                    false :
                    (this.props.entity.code === null))
            };
        },
        render: function() {
            var that = this;
            var onCompulsoryChanged = function(event) {
                return that.setState({
                    compulsory: event.target.checked
                });
            };
            return React_createElement(RecordEditor,{
                entity: this.props.entity,
                entityTypeHumanName: "Subject",
                entityTypeMachineName: "subjects"
            },React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "name"
            },"Subject Name"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "name",
                placeholder: "e.g. Mathematics (H3)",
                defaultValue: (this.props.entity ?
                    (this.props.entity).name :
                    "")
            }),React_createElement("div",{
                className: "checkbox"
            },React_createElement("label",{},React_createElement("input",{
                type: "checkbox",
                onChange: onCompulsoryChanged,
                checked: this.state.compulsory
            }),"This is a compulsory subject.")),React_createElement("div",{
                className: "checkbox"
            },React_createElement("label",{},React_createElement("input",{
                type: "checkbox",
                name: "science",
                defaultChecked: (this.props.entity ?
                    this.props.entity.is_science :
                    false)
            }),"This is a science subject."))),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "code"
            },"Subject Code"),(this.state.compulsory ?
                React_createElement("input",{
                    type: "text",
                    className: "form-control",
                    disabled: true,
                    value: "",
                    placeholder: "None"
                }) :
                React_createElement("input",{
                    type: "text",
                    className: "form-control",
                    name: "code",
                    placeholder: "e.g. MA(H3)",
                    defaultValue: (this.props.entity ?
                        (this.props.entity).code :
                        "")
                })),React_createElement("p",{
                className: "help-block"
            },"Compulsory subjects do not have a subject code, because since everyone takes them, there is no reason to specify them in CSV. They will, however, still appear on PDF files if they are also science subjects.")),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "level"
            },"Applies To"),React_createElement("div",{
                className: "checkbox"
            },__map([
                1,
                2,
                3,
                4,
                5,
                6
            ],function(lv) {
                var checked = (that.props.entity ?
                    (-1 !== _.indexOf(that.props.entity.level,lv)) :
                    false);
                return React_createElement("label",{
                    key: lv,
                    className: "checkbox-inline"
                },React_createElement("input",{
                    type: "checkbox",
                    name: "level",
                    value: lv,
                    defaultChecked: checked
                }),"Year ",lv);
            }))),React_createElement("div",{
                className: "checkbox"
            },React_createElement("label",{},React_createElement("input",{
                type: "checkbox",
                name: "force",
                defaultChecked: false
            }),"Force the operation to continue despite errors (not recommended).")));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        SubjectEditor: "displayName"
    })));
    var BatchUploadStudents = React_createClass(_.defaults({
        getInitialState: function() {
            return {
                err: null
            };
        },
        render: function() {
            var that = this;
            var next = function(hideModal,setSpinner) {
                setSpinner(1);
                var formData = new FormData(($("#uploaderForm")).get(0));
                console.log(formData);
                var onError = function(jqxhr) {
                    var resp = JSON.parse(jqxhr.responseText);
                    return that.setState({
                        err: resp.meta.details
                    });
                };
                return $.ajax("/api/students/many",{
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: hideModal,
                    error: function(jqxhr) {
                        setSpinner(0);
                        console.log("http error");
                        console.log(jqxhr);
                        return onError(jqxhr);
                    }
                });
            };
            return React_createElement(ActionModal,{
                actionButtonStyle: "primary",
                actionButtonLabel: "Upload",
                title: "Add Students via Uploading CSV File",
                next: next
            },(this.state.err ?
                React_createElement("div",{
                    className: "alert alert-danger",
                    role: "alert"
                },this.state.err) :
                null),React_createElement("form",{
                id: "uploaderForm",
                role: "form"
            },React_createElement("p",{
                className: "help-block"
            },"This allows you to upload a CSV file of students and add all of them. This is an all-or-nothing operation: even if only one student could not be added, none of the students will be added."),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "csv"
            },"CSV File"),React_createElement("input",{
                type: "file",
                className: "form-control",
                name: "csv",
                accept: "text/csv,.csv",
                required: true
            }))));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        BatchUploadStudents: "displayName"
    })));
    var TestDecoder = React_createClass(_.defaults({
        getInitialState: function() {
            return {
                decodeResult: null
            };
        },
        render: function() {
            var that = this;
            var next = function(hideModal,setSpinner) {
                setSpinner(1);
                return $.getJSON("/api/subjects/test-decode",($("#decoderForm")).serialize(),function(data) {
                    setSpinner(0);
                    return that.setState({
                        decodeResult: data.data
                    });
                });
            };
            var subjectsToString = function(ss) {
                return (__map(ss,function(s) {
                    return s.name;
                })).join(", ");
            };
            return React_createElement(ActionModal,{
                actionButtonStyle: "primary",
                actionButtonLabel: "Decode",
                title: "Test Decode Subject Codes",
                next: next
            },(this.state.decodeResult ?
                React_createElement("div",{
                    className: "panel panel-default"
                },React_createElement("div",{
                    className: "panel-heading"
                },"Decode Results"),React_createElement("div",{
                    className: "panel-body"
                },((0 === this.state.decodeResult.length) ?
                    "The subject codes could not be decoded at all." :
                    ((1 === this.state.decodeResult.length) ?
                        React_createElement("div",{},"The subject codes could be unambiguously decoded: ",React_createElement("br",{}),subjectsToString(this.state.decodeResult[0])) :
                        (true ?
                            React_createElement("div",{},"The subject codes could not be unambiguously decoded; here are the possibilities:",React_createElement("ul",{},__map(this.state.decodeResult,function(ss) {
                                return React_createElement("li",{},subjectsToString(ss));
                            }))) :
                            undefined))))) :
                null),React_createElement("form",{
                id: "decoderForm",
                role: "form"
            },React_createElement("p",{
                className: "help-block"
            },"This decoder allows you to preview decoding of a set of subject codes. You can enter a series of subject codes and see how it will be decoded."),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "level"
            },"Year"),React_createElement("div",{
                className: "radio"
            },__map([
                1,
                2,
                3,
                4,
                5,
                6
            ],function(lv) {
                return React_createElement("label",{
                    key: lv,
                    className: "checkbox-inline"
                },React_createElement("input",{
                    type: "radio",
                    name: "level",
                    value: lv,
                    defaultChecked: (1 === lv)
                }),"Year ",lv);
            }))),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "str"
            },"Subject Code Combination"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "str",
                placeholder: "Enter subject codes here"
            }))));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        TestDecoder: "displayName"
    })));
    var TeacherEditor = React_createClass(_.defaults({
        propTypes: {
            entity: React_PropTypes.object
        },
        render: function() {
            return React_createElement(RecordEditor,{
                entity: this.props.entity,
                entityTypeHumanName: "Teacher",
                entityTypeMachineName: "teachers"
            },React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "name"
            },"Teacher Name"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "name",
                placeholder: "e.g. Chow Ban Hoe",
                defaultValue: (this.props.entity ?
                    (this.props.entity).name :
                    "")
            }),React_createElement("div",{
                className: "checkbox"
            },React_createElement("label",{},React_createElement("input",{
                type: "checkbox",
                name: "admin",
                defaultChecked: (this.props.entity ?
                    this.props.entity.is_admin :
                    false)
            }),"This teacher is an administrator."))),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "witness"
            },"Witness Name (Capital, with Salutation)"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "witness",
                placeholder: "e.g. MR CHOW BAN HOE",
                defaultValue: (this.props.entity ?
                    (this.props.entity).witness_name :
                    "")
            })),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "email"
            },"Email Address"),React_createElement("input",{
                type: "email",
                className: "form-control",
                name: "email",
                placeholder: "e.g. chow_ban_hoe@moe.edu.sg",
                defaultValue: (this.props.entity ?
                    (this.props.entity).email :
                    "")
            })),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "unit"
            },"Unit"),React_createElement("input",{
                type: "email",
                className: "form-control",
                name: "unit",
                placeholder: "e.g. Bio",
                defaultValue: (this.props.entity ?
                    (this.props.entity).unit :
                    "")
            })));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        TeacherEditor: "displayName"
    })));
    var StudentEditor = React_createClass(_.defaults({
        propTypes: {
            auxiliary: React_PropTypes.object.isRequired,
            entity: React_PropTypes.object
        },
        getInitialState: function() {
            return {
                currentLevel: (this.props.entity ?
                    this.props.entity["class"][0] :
                    undefined)
            };
        },
        render: function() {
            var that = this;
            var classChange = function(e) {
                var match = (/^([1-6])[A-NP-Z]$/).exec(e.target.value);
                return that.setState({
                    currentLevel: (match ?
                        parseInt(match[1],10) :
                        null)
                });
            };
            return React_createElement(RecordEditor,{
                entity: this.props.entity,
                entityTypeHumanName: "Student",
                entityTypeMachineName: "students"
            },React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "class"
            },"Class"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "class",
                placeholder: "e.g. 5N",
                defaultValue: (this.props.entity ?
                    (this.props.entity["class"]).join("") :
                    ""),
                onChange: classChange
            })),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "indexno"
            },"Register Number"),React_createElement("input",{
                type: "number",
                className: "form-control",
                name: "indexno",
                placeholder: "e.g. 22",
                defaultValue: (this.props.entity ?
                    (this.props.entity).index_number :
                    "")
            })),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "name"
            },"Full Name"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "name",
                inputmode: "latin-name",
                defaultValue: (this.props.entity ?
                    (this.props.entity).name :
                    "")
            })),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "chinesename"
            },"Chinese Name"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "chinesename",
                inputmode: "kana",
                defaultValue: (this.props.entity ?
                    (this.props.entity).chinese_name :
                    "")
            })),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "nric"
            },"Partial NRIC"),React_createElement("input",{
                type: "text",
                className: "form-control",
                name: "nric",
                inputmode: "verbatim",
                defaultValue: (this.props.entity ?
                    (this.props.entity).nric :
                    "")
            })),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "witnesser"
            },"Witness"),React_createElement("select",{
                className: "form-control",
                name: "witness",
                defaultValue: (this.props.entity ?
                    (this.props.entity).witnesser :
                    "")
            },([
                React_createElement("option",{
                    key: 0
                },"None")
            ]).concat(__map(this.props.auxiliary.teacherInfo.data,function(teacher) {
                return React_createElement("option",{
                    value: teacher.id,
                    key: teacher.id
                },teacher.name," (",teacher.witness_name,")");
            })))),React_createElement("div",{
                className: "form-group"
            },React_createElement("label",{
                htmlFor: "subj"
            },"Subject Combination"),React_createElement("div",{
                className: "checkbox"
            },(this.state.currentLevel ?
                __map(_.filter(that.props.auxiliary.subjectInfo.data,function(subject) {
                    return (_.contains(subject.level,that.state.currentLevel) && (!(subject.code === null)));
                }),function(subject,idx) {
                    return React_createElement("label",{
                        className: "checkbox-inline",
                        key: subject.id
                    },React_createElement("input",{
                        type: "checkbox",
                        name: "subj",
                        value: (1 + idx),
                        defaultChecked: (that.props.entity ?
                            _.contains(that.props.entity.subject_combi,subject.id) :
                            false)
                    }),subject.name," (",subject.code,")");
                }) :
                React_createElement("p",{
                    className: "help-block"
                },"Subjects are not available for selection because you did not correctly enter a class.")))));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        StudentEditor: "displayName"
    })));
    var DeleteConfirmation = React_createClass(_.defaults({
        propTypes: {
            entity: React_PropTypes.object.isRequired
        },
        render: function() {
            var dataSpec = (pageSpec[window.location.pathname]).dataSpec;
            var hname = dataSpec.humanName;
            var mname = dataSpec.machineName;
            var endpoint = ((("/api/" + mname) + "/") + this.props.entity.id);
            var next = function(hideModal) {
                return $.ajax(endpoint,{
                    type: "DELETE",
                    complete: hideModal
                });
            };
            var message = (((("Are you sure you want to delete the " + hname) + " “") + this.props.entity.name) + "” from the database?");
            return React_createElement(ActionModal,{
                title: ("Delete " + hname),
                actionButtonLabel: "Delete",
                actionButtonStyle: "danger",
                next: next
            },React_createElement("p",{},message));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        DeleteConfirmation: "displayName"
    })));
    var AdminHomeR = React_createClass(_.defaults({
        render: function() {
            return React_createElement("div",{
                className: "row"
            },React_createElement("div",{
                className: "col-sm-11 col-md-8 col-lg-7"
            },React_createElement("h2",{},"Welcome"),React_createElement("p",{},"Welcome to the admin console for RVHS Science Lab Undertaking Project. XXX Be verbose."),React_createElement("h2",{},"Quick Guide"),React_createElement("p",{},"TODO"),React_createElement("h2",{},"API Documentation"),React_createElement("p",{},"If you know some basics of programming, you can use it to add or remove things automatically via the HTTP JSON API.")));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        AdminHomeR: "displayName"
    })));
    var EntityPage = React_createClass(_.defaults({
        propTypes: {
            customButtons: React_PropTypes.node,
            wsUrl: React_PropTypes.string,
            auxiliary: React_PropTypes.object
        },
        getInitialState: function() {
            var dataSpec = (pageSpec[window.location.pathname]).dataSpec;
            var mname = dataSpec.machineName;
            return {
                conn: APIConnection((this.props.wsUrl || ("/api/" + mname)))
            };
        },
        componentWillReceiveProps: function(newProps) {
            var that = this;
            return ((newProps.wsUrl !== this.props.wsUrl) ?
                (function() {
                    that.state.conn.close();
                    return that.setState({
                        conn: APIConnection(newProps.wsUrl)
                    });
                })() :
                undefined);
        },
        render: function() {
            var that = this;
            var dataSpec = (pageSpec[window.location.pathname]).dataSpec;
            var hnamepl = dataSpec.humanNamePlural;
            var mname = dataSpec.machineName;
            var editor = dataSpec.editor;
            var onAddButtonClick = function() {
                return React.render(React_createElement(editor,{
                    auxiliary: that.props.auxiliary
                }),getModalWrapper());
            };
            var onRemoveAllButtonClick = function() {
                return React.render(React_createElement(ActionModal,{
                    title: ("Deleting All " + hnamepl),
                    actionButtonLabel: "Yes, Delete All",
                    actionButtonStyle: "danger",
                    next: function(hideModal) {
                        return $.ajax(("/api/" + mname),{
                            type: "DELETE",
                            complete: hideModal
                        });
                    }
                },React_createElement("p",{},(((("Are you sure you want to delete all " + hnamepl) + " currently stored in the database? This will also delete all references to these ") + hnamepl) + ", if they exist."))),getModalWrapper());
            };
            return React_createElement("div",{},React_createElement("div",{
                className: "pull-right btn-group",
                role: "toolbar",
                "aria-label": "Action Buttons"
            },(this.props.customButtons ?
                this.props.customButtons :
                null),React_createElement("button",{
                type: "button",
                className: "btn btn-default",
                onClick: onAddButtonClick
            },"Add New"),React_createElement("button",{
                type: "button",
                className: "btn btn-default",
                onClick: onRemoveAllButtonClick
            },"Remove All")),React_createElement("h2",{},("View " + hnamepl)),this.props.children,React_createElement(EntityTable,{
                conn: this.state.conn,
                entityEditor: editor,
                auxiliary: this.props.auxiliary
            }));
        },
        shouldComponentUpdate: function(newProps) {
            return (!_.isEqual(this.props,newProps));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        EntityPage: "displayName"
    })));
    var AdminCcasR = React_createClass(_.defaults({
        render: function() {
            return React_createElement(EntityPage,{});
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        AdminCcasR: "displayName"
    })));
    var AdminSubjectsR = React_createClass(_.defaults({
        render: function() {
            var onTestDecodeButtonClick = function() {
                return React.render(React_createElement(TestDecoder,{}),getModalWrapper());
            };
            var customButtons = React_createElement("button",{
                onClick: onTestDecodeButtonClick,
                type: "button",
                className: "btn btn-default"
            },"Test Decode");
            return React_createElement(EntityPage,{
                customButtons: customButtons
            });
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        AdminSubjectsR: "displayName"
    })));
    var AdminTeachersR = React_createClass(_.defaults({
        render: function() {
            return React_createElement(EntityPage,{});
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        AdminTeachersR: "displayName"
    })));
    var AdminStudentsR = React_createClass(_.defaults({
        getInitialState: function() {
            var that = this;
            var ccaConn = APIConnection("/api/ccas");
            var teacherConn = APIConnection("/api/teachers");
            var subjectConn = APIConnection("/api/subjects");
            ccaConn.registerCallback(function(d) {
                return that.setState({
                    ccaInfo: d
                });
            });
            teacherConn.registerCallback(function(d) {
                return that.setState({
                    teacherInfo: d
                });
            });
            subjectConn.registerCallback(function(d) {
                return that.setState({
                    subjectInfo: d
                });
            });
            var emptyData = {
                data: []
            };
            return {
                queryString: "searchby=none",
                selected: "class",
                ccaConn: ccaConn,
                teacherConn: teacherConn,
                subjectConn: subjectConn,
                ccaInfo: emptyData,
                teacherInfo: emptyData,
                subjectInfo: emptyData
            };
        },
        componentWillUnmount: function() {
            this.state.ccaConn.close();
            this.state.teacherConn.close();
            return this.state.subjectConn.close();
        },
        render: function() {
            var onBatchUploadButtonClick = function() {
                return React.render(React_createElement(BatchUploadStudents,{}),getModalWrapper());
            };
            var customButtons = React_createElement("button",{
                onClick: onBatchUploadButtonClick,
                type: "button",
                className: "btn btn-default"
            },"Add New (Upload CSV File)");
            var that = this;
            var onRadioChange = function(e) {
                return (e.target.checked ?
                    that.setState({
                        selected: e.target.value
                    }) :
                    undefined);
            };
            var onViewButtonClick = function(e) {
                e.preventDefault();
                return that.setState({
                    queryString: ($("#searchbyForm")).serialize()
                });
            };
            var auxiliary = {
                teacherInfo: that.state.teacherInfo,
                ccaInfo: that.state.ccaInfo,
                subjectInfo: that.state.subjectInfo
            };
            return React_createElement("div",{},React_createElement("div",{
                className: "row"
            },React_createElement("div",{
                className: "col-sm-11 col-md-8 col-lg-7"
            },React_createElement("h4",{},"Which students would you like to see?"),React_createElement("form",{
                role: "form",
                id: "searchbyForm"
            },React_createElement("div",{
                className: "radio"
            },React_createElement("label",{},React_createElement("input",{
                type: "radio",
                name: "searchby",
                value: "class",
                defaultChecked: true,
                onChange: onRadioChange
            }),"I’d like to view students from a particular class.",((this.state.selected === "class") ?
                React_createElement("input",{
                    type: "text",
                    className: "form-control",
                    name: "class",
                    placeholder: "Enter a class, e.g. 5N"
                }) :
                React_createElement("input",{
                    type: "text",
                    className: "form-control",
                    disabled: true,
                    value: ""
                })))),React_createElement("div",{
                className: "radio"
            },React_createElement("label",{},React_createElement("input",{
                type: "radio",
                name: "searchby",
                value: "teacher",
                onChange: onRadioChange
            }),"I’d like to view students whose witness is a particular teacher.",((this.state.selected === "teacher") ?
                React_createElement("select",{
                    className: "form-control",
                    name: "id"
                },__map(auxiliary.teacherInfo.data,function(teacher) {
                    return React_createElement("option",{
                        value: teacher.id,
                        key: teacher.id
                    },teacher.name," (",teacher.witness_name,")");
                })) :
                React_createElement("select",{
                    className: "form-control",
                    disabled: true
                })))),React_createElement("div",{
                className: "radio"
            },React_createElement("label",{},React_createElement("input",{
                type: "radio",
                name: "searchby",
                value: "subject",
                onChange: onRadioChange
            }),"I’d like to view students who takes a particular subject.",((this.state.selected === "subject") ?
                React_createElement("select",{
                    className: "form-control",
                    name: "id"
                },__map(auxiliary.subjectInfo.data,function(subject) {
                    return React_createElement("option",{
                        value: subject.id,
                        key: subject.id
                    },subject.name," (",(__map(subject.level,function(l) {
                        return ("Year " + l);
                    })).join(", "),")");
                })) :
                React_createElement("select",{
                    className: "form-control",
                    disabled: true
                })))),React_createElement("div",{
                className: "radio"
            },React_createElement("label",{},React_createElement("input",{
                type: "radio",
                name: "searchby",
                value: "cca",
                onChange: onRadioChange
            }),"I’d like to view students from a particular CCA.",((this.state.selected === "cca") ?
                React_createElement("select",{
                    className: "form-control",
                    name: "id"
                },__map(auxiliary.ccaInfo.data,function(cca) {
                    return React_createElement("option",{
                        value: cca.id,
                        key: cca.id
                    },cca.name," (",cca.category,")");
                })) :
                React_createElement("select",{
                    className: "form-control",
                    disabled: true
                })))),React_createElement("div",{
                className: "radio"
            },React_createElement("label",{},React_createElement("input",{
                type: "radio",
                name: "searchby",
                value: "all",
                onChange: onRadioChange
            }),"I’d like to view ",React_createElement("em",{},"all")," students. (",React_createElement("strong",{},"NOT RECOMMENDED:")," very taxing on the network)")),React_createElement("button",{
                type: "submit",
                className: "btn btn-primary",
                onClick: onViewButtonClick
            },"View")))),React_createElement("div",{
                className: "row"
            },React_createElement(EntityPage,{
                wsUrl: ("/api/students?" + this.state.queryString),
                auxiliary: auxiliary,
                customButtons: customButtons
            })));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        AdminStudentsR: "displayName"
    })));
    var lookupForeign = function(dataset,id) {
        return (_.find(dataset.data,function(v) {
            return (id === v.id);
        }) || "??");
    };
    var pageSpec = {
        "/admin": {
            pageName: "Home",
            component: AdminHomeR,
            dataSpec: null
        },
        "/admin/ccas": {
            pageName: "Manage CCAs",
            component: AdminCcasR,
            dataSpec: {
                humanName: "CCA",
                humanNamePlural: "CCAs",
                machineName: "ccas",
                editor: CcaEditor,
                categoryColumn: [
                    "category",
                    _.identity,
                    "CCA Category"
                ],
                columns: [
                    [
                        "name",
                        _.identity,
                        "CCA Name"
                    ]
                ]
            }
        },
        "/admin/subjects": {
            pageName: "Manage Subjects",
            component: AdminSubjectsR,
            dataSpec: {
                humanName: "Subject",
                humanNamePlural: "Subjects",
                machineName: "subjects",
                editor: SubjectEditor,
                categoryColumn: [
                    "level",
                    function(ls) {
                        return (__map(ls,function(l) {
                            return ("Year " + l);
                        })).join(", ");
                    },
                    "Applies To"
                ],
                columns: [
                    [
                        "name",
                        _.identity,
                        "Subject Name"
                    ],
                    [
                        "code",
                        function(v) {
                            return (v ?
                                React_createElement("code",{},v) :
                                React_createElement("i",{},"(None; Compulsory Subject)"));
                        },
                        "Subject Code"
                    ],
                    [
                        "is_science",
                        function(b) {
                            return (b ?
                                "Yes" :
                                "No");
                        },
                        "Science Subject?"
                    ]
                ]
            }
        },
        "/admin/teachers": {
            pageName: "Manage Teachers",
            component: AdminTeachersR,
            dataSpec: {
                humanName: "Teacher",
                humanNamePlural: "Teachers",
                machineName: "teachers",
                editor: TeacherEditor,
                categoryColumn: null,
                columns: [
                    [
                        "name",
                        _.identity,
                        "Name"
                    ],
                    [
                        "unit",
                        _.identity,
                        "Unit"
                    ],
                    [
                        "email",
                        _.identity,
                        "Email Address"
                    ],
                    [
                        "is_admin",
                        function(b) {
                            return (b ?
                                "Yes" :
                                "No");
                        },
                        "Administrator?"
                    ],
                    [
                        "witness_name",
                        _.identity,
                        "Witness Name"
                    ]
                ]
            }
        },
        "/admin/students": {
            pageName: "Manage Students",
            component: AdminStudentsR,
            dataSpec: {
                humanName: "Student",
                humanNamePlural: "Students",
                machineName: "students",
                editor: StudentEditor,
                categoryColumn: [
                    "class",
                    _.identity,
                    "Class"
                ],
                columns: [
                    [
                        "index_number",
                        _.identity,
                        "Reg #"
                    ],
                    [
                        "name",
                        _.identity,
                        "Name"
                    ],
                    [
                        "chinese_name",
                        _.identity,
                        "Chinese"
                    ],
                    [
                        "nric",
                        function(v) {
                            return React_createElement("span",{
                                className: "hover-view",
                                "data-text": (v).slice(-5)
                            });
                        },
                        "NRIC"
                    ],
                    [
                        "subject_combi",
                        function(ss) {
                            var that = this;
                            return ((__map(ss,function(s) {
                                return (lookupForeign(that.subjectInfo,s)).name;
                            })).join(", ") || React_createElement("i",{},"—"));
                        },
                        "Subjects"
                    ],
                    [
                        "witnesser",
                        function(tid) {
                            return ((tid === null) ?
                                React_createElement("i",{},"None") :
                                (lookupForeign(this.teacherInfo,tid)).name);
                        },
                        "Witness"
                    ],
                    [
                        "submission",
                        function(sub) {
                            return ((sub.tag === "SubmissionNotOpen") ?
                                "Locked" :
                                ((sub.tag === "SubmissionOpen") ?
                                    "Open" :
                                    ((sub.tag === "SubmissionCompleted") ?
                                        "Completed" :
                                        undefined)));
                        },
                        "Status"
                    ]
                ]
            }
        }
    };
    var Page = React_createClass(_.defaults({
        render: function() {
            var pathname = window.location.pathname;
            var tabs = __map(pageSpec,function(page,route) {
                return React_createElement("li",{
                    key: route,
                    role: "presentation",
                    className: ((route === pathname) ?
                        "active" :
                        "")
                },React_createElement("a",{
                    href: ((route === pathname) ?
                        "#" :
                        route)
                },(page).pageName));
            });
            return React_createElement("div",{
                id: "content-wrapper"
            },React_createElement("div",{
                id: "modal-wrapper"
            }),React_createElement("div",{
                className: "container"
            },React_createElement("div",{
                className: "page-header"
            },React_createElement("h1",{},"RVHS Science Lab Undertaking — For Teachers and Administrators")),React_createElement("p",{},"You are logged in as xxx."),React_createElement("div",{
                role: "tabpanel"
            },React_createElement("ul",{
                className: "nav nav-tabs"
            },tabs)),React_createElement("div",{
                id: "main-content"
            })));
        },
        componentDidMount: function() {
            var pathname = window.location.pathname;
            return ((typeof(window.WebSocket) === "undefined") ?
                React.render(React_createElement(Modal,{
                    canClose: false,
                    title: "Browser Unsupported"
                },React_createElement("p",{},"Your browser is too old to use this website. This website requires at least Internet Explorer version 10, Apple Safari version 7, Google Chrome version 16, or Mozilla Firefox version 11. Regardless of which broswer you are using, it is always recommended that you use the latest version available.")),getModalWrapper()) :
                React.render(React_createElement((pageSpec[pathname]).component,{}),($("#main-content")).get(0)));
        }
    },{
        render: function() {
            return false;
        }
    },_.invert({
        Page: "displayName"
    })));
    return React.render(React_createElement(Page,{}),document.body);
});
